# Source this file to setup for chrome dev.
# Note absence of trailing /
_s = $_o/src
_d = $_o/depot_tools
_w = $_s/third_party/WebKit

GYP_GENERATORS = ninja
gomadir = /home/build/static/projects/goma

switch ( `{uname} ) {
case Darwin
  GYP_DEFINES = 'component=shared_library fastbuild=1'
case *
  GYP_DEFINES = 'component=shared_library fastbuild=1 chromeos=1'
}

path = ($_w/Tools/Scripts $_s/tools $_d $path )

# must update this to point at something reasonable
# from: git clone git://gitorious.org/qtwebkit/testfonts.git
WEBKIT_TESTFONTS=$_o/testfonts

# To get content_browsertests to run (And setup the dependencies.)
CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox

fn gclient {
  u $_o/depot_tools/gclient $*
}

# update these for the paths that I want to shorten
matchlist = ( \
    $_w/Source/WebCore/ \
    $_w/Source/WebKit/ \
    $_w/LayoutTests/ \
    $_s/third_party/ \
    $_s/ \
    $_o/ \
    $matchlist \
)

cdpath = (\
    . \
    $_w/Source \
    $_w/LayoutTest \
    $_w/Platform \
    $_s \
    $cdpath \
)

_extra_status = '(chrome) '

# truncates the given path argument to something nicer
# arrange from longest to shortest
fn skpupath {
  ifs=() _pwd = `{pwd}
  
  for ( i in $depotlist ) {
    # echo debugging $i
    if( ~ $_pwd  $i^* ) {
         echo $i | sed 's:'^$_o^'::'
         return 0
    }
  }
  return 1
}

# Does this need refinement?
# Possibly.
# This is also obsolete.
fn skpu {
  b = `{git branch | awk '/^\*/ {print $2 }'}
  _spork_path = '/usr/local/google/rjkroege'^`{skpupath}
  echo  path $_spork_path
  git commit -a -m wip
  git push linux
  ssh spork 'cd '^$_spork_path^'; git reset --hard'
}

# Running Goma
# TODO(rjkroege): These need to be updated.
# I might want to make this configurable
fn goma-enable {
  # TODO(rjkroege) insert calls here to initialize.
  path = ($_s/third_party/llvm-build/Release+Asserts/bin $path)
  CC = clang
  CXX = clang++
}

fn goma-disable {
  # TODO: This should also adjust the firewall configuration
  _np = ()
  for (i in $path) {
    switch ($i) {
    case $_s/third_party/llvm-build/Release+Asserts/bin
    case *
      _np = ($_np $i)
    }
  }
  path = $_np
  CC = ()
  CXX = ()
}

# I need this to work better...
fn nin {
  _eeh = `{pwd | sed 's/\//\\\//g'}^'\/out\/Debug\/Errors'
  # echo $_eeh
  # 9p read acme/index | awk  '{print $1}'
  # echo '/'^$_eeh^'/ { print $1}'
  _nef = `{9p read acme/index | awk '/'^$_eeh^'/ { print $1}'}
  switch ( $#_nef )  {
  case 0
    echo "No error file? Bad directory?"
  case *
    ninja -C out/Debug $* | 9p write acme/^$_nef^/body
  }
}

# in particular, I want some scriptage to  do something useful...


fn install {
    ssh pixel stop ui
    # Copy chrome over.
    rsync -rtlv --inplace 'out/Release/'^(chrome content_shell chrome.pak libffmpegsumo.so locales resources resources.pak) pixel:/opt/google/chrome/.
    rsync -rtlv --inplace out/Release/lib/ pixel:/opt/google/chrome/.
    # ssh pixel start ui
}

# {rsync -rtlv --inplace 'out/Release/'^(chrome content_shell chrome.pak libffmpegsumo.so locales resources resources.pak) pixel:/opt/google/chrome/.}